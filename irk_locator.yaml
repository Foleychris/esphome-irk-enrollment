substitutions:
  irk_prefilter_entity: sensor.irk_prefilter

esphome:
  includes:
    - irk_resolver.h

esp32_ble_tracker:
  on_ble_advertise:
  - then:
    - if:
        condition:
          lambda: |-
            uint8_t addr[6];
            for (int i = 0; i < irk_prefilters.size(); i++) {
              auto& irk_vec = irk_prefilters[i];
              uint8_t* irk = irk_vec.data();
              auto addr64 = x.address_uint64();
              addr[5] = (addr64 >> 40) & 0xff;
              addr[4] = (addr64 >> 32) & 0xff;
              addr[3] = (addr64 >> 24) & 0xff;
              addr[2] = (addr64 >> 16) & 0xff;
              addr[1] = (addr64 >> 8) & 0xff;
              addr[0] = (addr64) & 0xff;
              if (ble_ll_resolv_rpa((const uint8_t *)addr, irk)) {
                ESP_LOGD("local_irk", "Resolved idx %d", i);
                return true;
              }
            }
            return false;
        then:
          - homeassistant.event:
              event: esphome.ble_tracking_beacon
              data:
                source: ${device_name}
                rssi: !lambda |-
                  return x.get_rssi();
                addr: !lambda |-
                  return x.address_str();

text_sensor:
  - platform: homeassistant
    internal: true
    entity_id: ${irk_prefilter_entity}
    id: irk_prefilter
    on_value:
      then:
        - lambda: |-
            uint8_t output[16];
            size_t outlen;
            size_t pos = 0;
            std::string token;
            irk_prefilters.clear();
            while ((pos = x.find(":")) != std::string::npos) {
              token = x.substr(0, pos);
              mbedtls_base64_decode(output, 16, &outlen, (const uint8_t *)token.c_str(), token.length());
              std::vector<uint8_t> ov;
              for (int i = 0; i < 16; i++) {
                ov.push_back(output[i]);
              }
              irk_prefilters.push_back(ov);
              x.erase(0, pos + 1);
            }
